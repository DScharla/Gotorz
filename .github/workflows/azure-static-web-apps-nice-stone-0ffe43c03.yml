name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'  # Adjust as needed
      
      # Create a custom NuGet.Config to disable treating warnings as errors
      - name: Create custom NuGet.Config
        run: |
          cat > NuGet.Config << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <packageSources>
              <clear />
              <add key="nuget.org" value="https://api.nuget.org/v3/index.json" />
            </packageSources>
            <config>
              <add key="warningsaserrors" value="false" />
            </config>
          </configuration>
          EOL
      
      # Modify csproj file to disable treating warnings as errors
      - name: Modify csproj
        run: |
          find GodTur -name "*.csproj" -exec sed -i 's/<TreatWarningsAsErrors>true<\/TreatWarningsAsErrors>/<TreatWarningsAsErrors>false<\/TreatWarningsAsErrors>/g' {} \;
          find GodTur -name "*.csproj" -exec sed -i 's/<WarningsAsErrors>.*<\/WarningsAsErrors>/<WarningsAsErrors><\/WarningsAsErrors>/g' {} \;
      
      # Build in Release mode with various options to ignore warnings
      - name: Build Blazor WebAssembly App
        run: |
          dotnet publish GodTur/Client/Client.csproj \
            -c Release \
            -o publish \
            -p:TreatWarningsAsErrors=false \
            -nowarn:CS8602 \
            --nologo \
            -v:m
      
      # Copy staticwebapp.config.json if it exists
      - name: Copy Static Web App config
        run: |
          if [ -f "GodTur/Client/staticwebapp.config.json" ]; then
            cp GodTur/Client/staticwebapp.config.json publish/wwwroot/
          fi
      
      # Deploy only the static content without building
      - name: Deploy to Azure Static Web Apps
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "publish/wwwroot"  # Only the compiled wwwroot files
          output_location: ""  # Leave empty as we're providing the final content
          skip_app_build: true  # Skip Oryx build entirely
          api_location: ""

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "close"
