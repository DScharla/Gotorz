// <auto-generated />
using GodTur.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GodTur.Migrations
{
    [DbContext(typeof(OfferResponseContext))]
    [Migration("20250425102847_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GodTur.Models.Airport", b =>
                {
                    b.Property<string>("AirportId")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AirportId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "city_name");

                    b.Property<string>("IataCityCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "iata_city_code");

                    b.Property<string>("IataCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "iata_code");

                    b.Property<string>("IataCountryCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "iata_country_code");

                    b.Property<string>("IcaoCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "icao_code");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "longitude");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "time_zone");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("AirportId");

                    b.HasIndex("AirportId1");

                    b.HasIndex("CityId");

                    b.ToTable("Airports");

                    b.HasAnnotation("Relational:JsonPropertyName", "airport");
                });

            modelBuilder.Entity("GodTur.Models.City", b =>
                {
                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("IataCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "iata_code");

                    b.Property<string>("IataCountryCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "iata_country_code");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasAnnotation("Relational:JsonPropertyName", "city");
                });

            modelBuilder.Entity("GodTur.Models.FlightDetail", b =>
                {
                    b.Property<int>("FlightDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightDetailId"));

                    b.Property<string>("DestinationAirportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DestinationType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "destination_type");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "duration");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("OriginAirportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OriginType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "origin_type");

                    b.HasKey("FlightDetailId");

                    b.HasIndex("DestinationAirportId");

                    b.HasIndex("OfferId");

                    b.HasIndex("OriginAirportId");

                    b.ToTable("Flights");

                    b.HasAnnotation("Relational:JsonPropertyName", "slices");
                });

            modelBuilder.Entity("GodTur.Models.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"));

                    b.PrimitiveCollection<string>("SupportedPassengerIdentityDocumentTypes")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "supported_passenger_identity_document_types");

                    b.Property<string>("TaxAmount")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "tax_amount");

                    b.Property<string>("TaxCurrency")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "tax_currency");

                    b.Property<string>("TotalAmount")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "total_amount");

                    b.Property<string>("TotalCurrency")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "total_currency");

                    b.Property<string>("TotalEmissionsKg")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "total_emissions_kg");

                    b.HasKey("OfferId");

                    b.ToTable("FlightOffers");
                });

            modelBuilder.Entity("GodTur.Models.PassengerResponse", b =>
                {
                    b.Property<string>("PassengerId")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "passenger_id");

                    b.Property<string>("CabinClass")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "cabin_class");

                    b.Property<string>("CabinClassMarketingName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "cabin_class_marketing_name");

                    b.Property<string>("FareBasisCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "fare_basis_code");

                    b.Property<int?>("SegmentId")
                        .HasColumnType("int");

                    b.HasKey("PassengerId");

                    b.HasIndex("SegmentId");

                    b.ToTable("Passengers");

                    b.HasAnnotation("Relational:JsonPropertyName", "passengers");
                });

            modelBuilder.Entity("GodTur.Models.Segment", b =>
                {
                    b.Property<int>("SegmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SegmentId"));

                    b.Property<string>("ArrivingAt")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "arriving_at");

                    b.Property<string>("DepartingAt")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "departing_at");

                    b.Property<string>("DestinationAirportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FlightDetailId")
                        .HasColumnType("int");

                    b.Property<string>("MarketingCarrierFlightNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "marketing_carrier_flight_number");

                    b.Property<string>("OperatingCarrierFlightNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "operating_carrier_flight_number");

                    b.Property<string>("OriginAirportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OriginTerminal")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "origin_terminal");

                    b.HasKey("SegmentId");

                    b.HasIndex("DestinationAirportId");

                    b.HasIndex("FlightDetailId");

                    b.HasIndex("OriginAirportId");

                    b.ToTable("Segments");

                    b.HasAnnotation("Relational:JsonPropertyName", "segments");
                });

            modelBuilder.Entity("GodTur.Models.Stop", b =>
                {
                    b.Property<string>("StopId")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AirportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArrivingAt")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "arriving_at");

                    b.Property<string>("DepartingAt")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "departing_at");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "duration");

                    b.Property<int?>("SegmentId")
                        .HasColumnType("int");

                    b.HasKey("StopId");

                    b.HasIndex("AirportId");

                    b.HasIndex("SegmentId");

                    b.ToTable("Stops");

                    b.HasAnnotation("Relational:JsonPropertyName", "stops");
                });

            modelBuilder.Entity("GodTur.Models.Airport", b =>
                {
                    b.HasOne("GodTur.Models.Airport", null)
                        .WithMany("Airports")
                        .HasForeignKey("AirportId1");

                    b.HasOne("GodTur.Models.City", "City")
                        .WithMany("Airports")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("GodTur.Models.FlightDetail", b =>
                {
                    b.HasOne("GodTur.Models.Airport", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationAirportId");

                    b.HasOne("GodTur.Models.Offer", null)
                        .WithMany("FlightsDetail")
                        .HasForeignKey("OfferId");

                    b.HasOne("GodTur.Models.Airport", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginAirportId");

                    b.Navigation("Destination");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("GodTur.Models.PassengerResponse", b =>
                {
                    b.HasOne("GodTur.Models.Segment", null)
                        .WithMany("Passengers")
                        .HasForeignKey("SegmentId");
                });

            modelBuilder.Entity("GodTur.Models.Segment", b =>
                {
                    b.HasOne("GodTur.Models.Airport", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationAirportId");

                    b.HasOne("GodTur.Models.FlightDetail", null)
                        .WithMany("Segments")
                        .HasForeignKey("FlightDetailId");

                    b.HasOne("GodTur.Models.Airport", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginAirportId");

                    b.Navigation("Destination");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("GodTur.Models.Stop", b =>
                {
                    b.HasOne("GodTur.Models.Airport", "Airport")
                        .WithMany()
                        .HasForeignKey("AirportId");

                    b.HasOne("GodTur.Models.Segment", null)
                        .WithMany("Stops")
                        .HasForeignKey("SegmentId");

                    b.Navigation("Airport");
                });

            modelBuilder.Entity("GodTur.Models.Airport", b =>
                {
                    b.Navigation("Airports");
                });

            modelBuilder.Entity("GodTur.Models.City", b =>
                {
                    b.Navigation("Airports");
                });

            modelBuilder.Entity("GodTur.Models.FlightDetail", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("GodTur.Models.Offer", b =>
                {
                    b.Navigation("FlightsDetail");
                });

            modelBuilder.Entity("GodTur.Models.Segment", b =>
                {
                    b.Navigation("Passengers");

                    b.Navigation("Stops");
                });
#pragma warning restore 612, 618
        }
    }
}
