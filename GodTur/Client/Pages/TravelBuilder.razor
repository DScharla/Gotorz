@using Shared
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization

@page "/TravelBuilder"
@inject HttpClient client
@*@rendermode InteractiveWebAssemblyRenderMode*@

<h3>TravelBuilder</h3>
<div id="BigSearch">
    <div>
        <div>
            <input class="SearchElement" @bind="flightsParam.Origin" placeholder="Departure Airport" />
            <InputDate @bind-Value="flightsParam.DepartureDate" DateFormat="yyyy-MM-dd" Min="DateTime.Now" Enable="true" />
        </div>
        <br>
        <br>
        <br>
        <div>
            <input class="SearchElement" @bind="flightsParam.Destination" placeholder="Arrival Airport" />
            <InputDate @bind-Value="flightsParam.ReturnDate" DateFormat="yyyy-MM-dd" Min="FromDate?.AddDays(1)" Enable="true" />
            <br />
            <br />
            <button @onclick="GetFlights" name="Search">Search</button>
        </div>
    </div>
    <div>
        <div>
            <input class="SearchElement" @bind="stayParam.City" placeholder="City" />        
            <input class="SearchElement" @bind="stayParam.Country" placeholder="Country" />
        </div>
        <br>
        <br>
        <br>
        <div class="row">

            <InputDate @bind-Value="stayParam.CheckInDate" DateFormat="yyyy-MM-dd" Min="Datetime.Now" Enable="true" />
            <InputDate @bind-Value="stayParam.CheckOutDate" DateFormat="yyyy-MM-dd" Min="FromDate?.AddDays(1)" Enable="true" />        
        </div>
        <br />
        <div>
            <button @onclick="GetStays" name="Search">Search</button>
        </div>
    </div>
</div>



<ol>
    @foreach (var flight in flightOffers) {
        <li>
            @flight.Origin
            @flight.Destination
            @flight.DepartureDate
            @flight.Price
            @*flight.FlightNumber*@
        </li>
    }
</ol>

 <ol>
	@foreach (var stay in stayOffers)
	{
		<li>
            @stay.HotelName
            @($"{stay.StreetNameNumber}, {stay.City}, {stay.Country}")
			@stay.Price
            @stay.AvailableRooms			
		</li>
	}
</ol> 

@code {
    private FlightDTO flightsParam = new FlightDTO();

    private StayDTO stayParam = new StayDTO();

    private List<FlightDTO> flightOffers = new();

    private List<StayDTO> stayOffers = new();

    private async Task<List<FlightDTO>> GetFlights()
    {
        string jsonFlightParam = JsonSerializer.Serialize(flightsParam);
        var content = new StringContent(jsonFlightParam, Encoding.UTF8, "application/json");

        //Forsøg at samle serializer og stringcontent i samme metode nedenunder
        //var response = await client.PostAsJsonAsync("https://localhost:7112/api/FlightBuilder/create", jsonDeparture + jsonReturn);

        var response = await client.PostAsync("https://localhost:7112/api/FlightBuilder/create", content);
        if (response.IsSuccessStatusCode) 
        { 
            return flightOffers = response.Content.ReadFromJsonAsync<List<FlightDTO>>().Result;
        }
        return flightOffers = new List<FlightDTO>();
    }

    private async Task<List<StayDTO>> GetStays()
    {
        string jsonStayParam = JsonSerializer.Serialize(stayParam);
        var content = new StringContent(jsonStayParam, Encoding.UTF8, "application/json");

        var response = await client.PostAsync("https://localhost:7112/api/HotelBuilder/stays", content);
        if(response.IsSuccessStatusCode)
        {
            return stayOffers = response.Content.ReadFromJsonAsync<List<StayDTO>>().Result;
        }
        return stayOffers = new List<StayDTO>();
    }
}
