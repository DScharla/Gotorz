@using Shared
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization

@page "/TravelBuilder"
@inject HttpClient client
@*@rendermode InteractiveWebAssemblyRenderMode*@

<h3>TravelBuilder</h3>
<EditForm Model="flightsParam" OnValidSubmit="GetFlights">
    <DataAnnotationsValidator />
        <div id="BigSearch">
        <div>
            <div>
                <input class="SearchElement" @bind="flightsParam.Origin" placeholder="Departure Airport" />
                <InputDate @bind-Value="flightsParam.DepartureDate" DateFormat="yyyy-MM-dd" Min="DateTime.Now" Enable="true" />
            </div>
            <br>
            <br>
            <br>
            <div>
                <input class="SearchElement" @bind="flightsParam.Destination" placeholder="Arrival Airport" />
                <InputDate @bind-Value="flightsParam.ReturnDate" DateFormat="yyyy-MM-dd" Min="FromDate?.AddDays(1)" Enable="true" />
                <br />
                <br />
                <button @onclick="GetFlights" name="Search">Search</button>
            </div>
        </div>
        <div>
            <div>
                <input class="SearchElement" @bind="stayParam.City" placeholder="City" />        
                <input class="SearchElement" @bind="stayParam.Country" placeholder="Country" />
            </div>
            <br>
            <br>
            <br>
            <div class="row">

                <InputDate @bind-Value="stayParam.CheckInDate" DateFormat="yyyy-MM-dd" Min="Datetime.Now" Enable="true" />
                <InputDate @bind-Value="stayParam.CheckOutDate" DateFormat="yyyy-MM-dd" Min="FromDate?.AddDays(1)" Enable="true" />        
            </div>
            <br />
            <div>
                <button @onclick="GetStays" name="Search">Search</button>
            </div>
        </div>
    </div>
</EditForm>

<InputSelect @bind-Value="selectedOutboundFlightID">
    <option value="-1">Select a flight</option>
    @foreach (var flight in flightOffers)
    {
        @if (flight.DepartureDate.Value.Date == flightsParam.DepartureDate.Value.Date)
        {
            <option value="@flight.ID">@flight.ID - @flight.Origin - @flight.Destination</option>
        }
    }
</InputSelect>
<InputSelect @bind-Value="selectedHomeboundFlightID">
    <option value="-1">Select a flight</option>
    @foreach (var flight in flightOffers)
    {
        @if (flight.DepartureDate.Value.Date == flightsParam.ReturnDate.Value.Date)
        {
            <option value="@flight.ID">@flight.ID - @flight.Origin - @flight.Destination</option>
        }
    }
</InputSelect>
<InputSelect @bind-Value="selectedStayID">
    <option value="-1">Select an acommodation</option>
    @foreach (var stay in stayOffers)
    {
        <option value="@stay.ID">@stay.ID - @stay.HotelName - @stay.Price</option>
    }
</InputSelect>

<button @onclick="SaveTravel" name="Save">Save</button>

<div>
    <ol class="border-black">
        @if (stayOffers.Count > 0)
        {
            foreach (var stay in stayOffers)
            {
                <li @onclick="@(() => SelectStay(stay.ID))">
                    <div>
                        <p>@stay.ID</p>
                        <p>@stay.HotelName</p>
                        <p>@stay.Price</p>
                        <p>@stay.City, @stay.Country</p>
                    </div>
                </li>
            }
        }
    </ol>
</div>


<ol>
    @if (flightOffers.Count > 0)
    {
        foreach (var flight in flightOffers)
        {
            @if (flight.DepartureDate.Value.Date == flightsParam.DepartureDate.Value.Date){
                <li @onclick="@(() => SelectOutboundFlight(flight.ID))">
                    <div>
                        <p>@flight.ID</p>
                        <p>@flight.Origin - @flight.Destination</p>
                        <p>@flight.DepartureDate</p>
                    </div>
                </li>
            }
        }
    }
</ol>

<ol>
    @if (flightOffers.Count > 0)
    {
        foreach (var flight in flightOffers)
        {
            @if (flight.DepartureDate.Value.Date == flightsParam.ReturnDate.Value.Date)
            {
                <li @onclick="@(() => SelectHomeboundFlight(flight.ID))">
                    <div>
                        <p>@flight.ID</p>
                        <p>@flight.Origin - @flight.Destination</p>
                        <p>@flight.DepartureDate</p>
                    </div>
                </li>
            }
        }
    }
</ol>

@code {
    private int selectedOutboundFlightID = -1;
    private FlightDTO? selectedOutboundFlightDTO => flightOffers.FirstOrDefault(f => f.ID == selectedOutboundFlightID);

    private int selectedHomeboundFlightID = -1;
    private FlightDTO? selectedHomeboundFlightDTO => flightOffers.FirstOrDefault(f => f.ID == selectedHomeboundFlightID);

    private int selectedStayID = -1;
    private StayDTO? selectedStayDTO => stayOffers.FirstOrDefault(s => s.ID == selectedStayID);


    private FlightDTO flightsParam = new FlightDTO() 
    {
        Origin = "CPH",
        Destination = "DTM",
        DepartureDate = new DateTime(2025, 06, 01),
        ReturnDate = new DateTime(2025, 06, 06),
    };

    private StayDTO stayParam = new StayDTO() 
    {
        City = "Dortmund",
        Country = "Germany",
        CheckInDate = new DateTime(2025,06,01),
        CheckOutDate = new DateTime(2025, 06, 06),
    };

    private List<FlightDTO> flightOffers = new();

    private List<StayDTO> stayOffers = new();

    private async Task<List<FlightDTO>> GetFlights()
    {
        if (selectedOutboundFlightDTO is not null) Console.WriteLine(selectedOutboundFlightDTO.ID.ToString());
        string jsonFlightParam = JsonSerializer.Serialize(flightsParam);
        var content = new StringContent(jsonFlightParam, Encoding.UTF8, "application/json");

        //Forsøg at samle serializer og stringcontent i samme metode nedenunder
        //var response = await client.PostAsJsonAsync("https://localhost:7112/api/FlightBuilder/create", jsonDeparture + jsonReturn);

        var response = await client.PostAsync("https://localhost:7112/api/FlightBuilder/create", content);
        if (response.IsSuccessStatusCode) 
        { 
            return flightOffers = response.Content.ReadFromJsonAsync<List<FlightDTO>>().Result;
        }
        return flightOffers = new List<FlightDTO>();    
    }

    private async Task<List<StayDTO>> GetStays()
    {
        string jsonStayParam = JsonSerializer.Serialize(stayParam);
        var content = new StringContent(jsonStayParam, Encoding.UTF8, "application/json");

        var response = await client.PostAsync("https://localhost:7112/api/HotelBuilder/stays", content);
        if(response.IsSuccessStatusCode)
        {
            return stayOffers = response.Content.ReadFromJsonAsync<List<StayDTO>>().Result;
        }
        return stayOffers = new List<StayDTO>();
    }

    private async Task<TravelDTO> SaveTravel()
    {
        TravelDTO travel = new TravelDTO()
        {
            OutboundFlight = selectedOutboundFlightDTO,
            HomeboundFlight = selectedHomeboundFlightDTO,
            Stay = selectedStayDTO
        };
        string jsonTravel = JsonSerializer.Serialize(travel);
        var content = new StringContent(jsonTravel, Encoding.UTF8, "application/json");
        var response = await client.PostAsync("https://localhost:7112/api/TravelBuilder/CreateTravel", content);
        if (response.IsSuccessStatusCode)
        {
            return travel;
        }
        return null;
    }
    private void SelectStay(int ID) 
    {
        selectedStayID = ID; 
    }
    private void SelectOutboundFlight(int ID)
    {
        selectedOutboundFlightID = ID;
    }
    private void SelectHomeboundFlight(int ID)
    {
        selectedHomeboundFlightID = ID;
    }

}
